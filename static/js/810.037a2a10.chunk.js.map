{"version":3,"file":"static/js/810.037a2a10.chunk.js","mappings":"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","sources":["components/MovieDetailsView/MovieDetailsView.js","services/API.js","services/ImgPath.js"],"sourcesContent":["import { useState, useEffect, lazy, Suspense } from 'react';\nimport { requestMovieDetails } from 'services/API';\nimport { Link, Routes, Route } from 'react-router-dom';\nimport { useParams } from 'react-router-dom';\nimport { TailSpin } from 'react-loader-spinner';\nimport ImgPath from 'services/ImgPath';\nimport '../../css/MovieDetailsView.modules.css';\n\nconst Cast = lazy(() => import('../Cast'));\nconst Reviews = lazy(() => import('../Reviews'));\n\nconst MovieDetailsView = () => {\n  let { movieId } = useParams();\n  const [movie, setMovie] = useState({});\n  const [error, setError] = useState([]);\n  const [status, setStatus] = useState('idle');\n\n  useEffect(() => {\n    async function MovieDetails() {\n      setStatus('pending');\n      try {\n        const movie = await requestMovieDetails(movieId);\n\n        setMovie(movie);\n      } catch (error) {\n        setError(error);\n        setStatus('rejected');\n      }\n      setStatus('resolved');\n    }\n    MovieDetails();\n  }, [movieId]);\n  if (status === 'pending') {\n    return <TailSpin />;\n  }\n  if (status === 'rejected') {\n    return <p>{error.message}</p>;\n  }\n\n  return (\n    <>\n      <>\n        <div className=\"movie-section\">\n          {movie.poster_path && (\n            <img\n              src={`${ImgPath}${movie.poster_path}`}\n              alt={movie.overview}\n              width=\"200\"\n              height=\"100\"\n              className=\"movie-img\"\n            />\n          )}\n          <div className=\"movie-date\">\n            <h2 className=\"movie-title\">\n              {movie.title}\n              <p className=\"movie-release\">\n                ({new Date(movie.release_date).getFullYear().toString()})\n              </p>\n            </h2>\n          </div>\n          <p className=\"movie-popularity\">\n            Use Score:{Math.round(movie.popularity)}%\n          </p>\n          <h3 className=\"overview-title\">Overview</h3>\n          <p className=\"overview-text\">{movie.overview}</p>\n          <h3 className=\"genres\">Genres</h3>\n          <ul className=\"genres-list\">\n            {movie.genres &&\n              movie.genres.map(genre => {\n                return (\n                  <li key={genre.id} className=\"genres-item\">\n                    {genre.name}\n                  </li>\n                );\n              })}\n          </ul>\n        </div>\n        <div className=\"line\"> </div>\n        <div className=\"additional\">\n          <h4 className=\"additional-title\">Additional information</h4>\n          <ul className=\"additional-list\">\n            <li className=\"additional-item\">\n              <Link to=\"cast\">Cast</Link>\n            </li>\n            <li>\n              <Link to=\"reviews\">Reviews</Link>\n            </li>\n          </ul>\n        </div>\n      </>\n      <Routes>\n        <Route\n          path=\"/cast\"\n          element={\n            <Suspense fallback={<TailSpin />}>\n              <Cast movieId={movieId} />{' '}\n            </Suspense>\n          }\n        />\n        <Route\n          path=\"/reviews\"\n          element={\n            <Suspense fallback={<TailSpin />}>\n              <Reviews movieId={movieId} />\n            </Suspense>\n          }\n        />\n      </Routes>\n    </>\n  );\n};\n\nexport default MovieDetailsView;\n","import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3/';\nconst API_KEY = '553dbf56094ae628f1a56828e9f90068';\n\nconst SearchFilm = async query => {\n  const response = await axios.get(\n    `search/movie?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n  );\n  return response.data.results;\n};\n\nconst requestTrendingFilms = async () => {\n  const response = await axios.get(`trending/movie/day?api_key=${API_KEY}`);\n  console.log(response);\n  return response.data.results;\n};\n\nconst requestMovieDetails = async movieId => {\n  const response = await axios.get(\n    `movie/${movieId}?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data;\n};\n\nconst requestMovieCredits = async movieID => {\n  const response = await axios.get(\n    `movie/${movieID}/credits?api_key=${API_KEY}&language=en-US`\n  );\n\n  return response.data.cast;\n};\n\nconst requestReviews = async movieID => {\n  const response = await axios.get(\n    `movie/${movieID}/reviews?api_key=${API_KEY}&language=en-US`\n  );\n  console.log(response);\n  return response.data.results;\n};\nconst genresRequest = async () => {\n  const response = await axios.get(\n    `genre/movie/list?api_key=${API_KEY}&language=en-US`\n  );\n  return response.data.results;\n};\n\nexport {\n  SearchFilm,\n  requestTrendingFilms,\n  requestMovieDetails,\n  requestMovieCredits,\n  requestReviews,\n  genresRequest,\n};\n","const ImgPath = 'https://image.tmdb.org/t/p/w500';\n\nexport default ImgPath;\n"],"names":["Cast","lazy","Reviews","movieId","useParams","useState","movie","setMovie","error","setError","status","setStatus","useEffect","requestMovieDetails","MovieDetails","message","className","poster_path","src","ImgPath","alt","overview","width","height","title","Date","release_date","getFullYear","toString","Math","round","popularity","genres","map","genre","name","id","to","path","element","Suspense","fallback","axios","API_KEY","SearchFilm","query","response","data","results","requestTrendingFilms","console","log","requestMovieCredits","movieID","cast","requestReviews"],"sourceRoot":""}